buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'http://repo.spring.io/plugins-release' }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.2.RELEASE")
        classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
    }
}

plugins {
    id "application"
    id "idea"
    id "java-library"
    id "java"
    id "groovy"
    id "jacoco"
    id "checkstyle"
    id "pmd"
    id 'com.adarshr.test-logger' version '1.2.0'
    id "org.unbroken-dome.test-sets" version "1.4.2"
    id "io.spring.dependency-management" version "1.0.4.RELEASE"
    id "org.springframework.boot" version "2.1.2.RELEASE"
    id "org.asciidoctor.convert" version "1.5.7"
    id "org.liquibase.gradle" version "2.0.1"
    id "com.palantir.docker" version "0.13.0"
    id 'net.ltgt.apt' version '0.15'
}

ext["snippetsDir"] = new File (project.buildDir ,"generated-snippets")
ext["spring-restdocs.version"] = "2.0.0.RELEASE"

repositories {
    maven {
        url 'http://repo.spring.io/milestone'
    }
}

dependencies {
    compile('org.projectlombok:lombok:1.18.0')
    annotationProcessor('org.projectlombok:lombok:1.18.0')


    compile('org.javassist:javassist:3.23.1-GA')
    compile('org.glassfish.jaxb:jaxb-runtime:2.3.2')

    compile("org.codehaus.groovy:groovy-all:2.4.14")
    compile("javax.inject:javax.inject:1")
    compile("org.springframework.boot:spring-boot-starter")
    compile("com.github.ulisesbocchio:jasypt-spring-boot-starter:2.1.0")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-hibernate4")
    compile("org.springframework.security.extensions:spring-security-saml2-core:1.0.3.RELEASE")
    compile("io.rest-assured:rest-assured:3.0.3")
    compile("io.rest-assured:json-schema-validator:3.0.3")
    compile("mysql:mysql-connector-java")
    compile("org.mariadb.jdbc:mariadb-java-client")
    compile("joda-time:joda-time:2.2")
    compile("com.jayway.jsonpath:json-path:2.0.0")
    compile("org.liquibase:liquibase-core:3.6.2")
    compile("commons-validator:commons-validator:1.6")
    compile("com.nimbusds:nimbus-jose-jwt:4.23")

    compile('org.webjars:bootstrap:3.3.7')
    compile('org.webjars:jquery:2.2.1')
    compile('org.webjars:font-awesome:5.0.6')
    compile("org.jasypt:jasypt-hibernate4:1.9.2")
    compile("org.bouncycastle:bcpkix-jdk15on:1.47")
    compile("org.slf4j:slf4j-api:1.7.25")
    compile("ch.qos.logback:logback-core:1.2.3")
    compile("ch.qos.logback:logback-classic:1.2.3")

    asciidoctor("org.springframework.restdocs:spring-restdocs-asciidoctor:${project.ext['spring-restdocs.version']}")

    testCompile("junit:junit:4.12")
    testCompile("org.junit.vintage:junit-vintage-engine:5.2.0")
    testCompile("org.junit.jupiter:junit-jupiter-api:5.2.0")
    testCompile("org.junit.jupiter:junit-jupiter-params:5.2.0")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.springframework.security:spring-security-test")
    testCompile("org.springframework.restdocs:spring-restdocs-restassured")
    testCompile("org.springframework.restdocs:spring-restdocs-mockmvc")
    testCompile("io.cucumber:cucumber-java:2.3.1")
    testCompile("io.cucumber:cucumber-junit:2.3.1")
    testCompile("io.cucumber:cucumber-spring:2.3.1")
    testCompile("io.cucumber:cucumber-jvm:2.3.1")
    testCompile("pl.pragmatists:JUnitParams:1.1.1")
    testCompile("com.tngtech.java:junit-dataprovider:1.12.0")
    testCompile("org.mockito:mockito-core:2.23.4")
    testCompile("org.hamcrest:hamcrest-all:1.3")
    testCompile("org.exparity:hamcrest-date:2.0.4")
    testCompile("org.ajbrown:name-machine:1.0.0")
    testCompile("com.playtika.testcontainers:testcontainers-common:1.7")
    testCompile("com.playtika.testcontainers:embedded-mariadb:1.7")
    testCompile("org.springframework.cloud:spring-cloud-starter:2.1.0.RELEASE")
    testCompile("org.spockframework:spock-core:1.1-groovy-2.4")
    testCompile("org.spockframework:spock-spring:1.1-groovy-2.4")

    testRuntime("cglib:cglib-nodep:3.2.4")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.2.0")
    testRuntime("org.springframework.boot:spring-boot-devtools")
}


sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11


mainClassName = "com.primasolutions.idp.Main"

bootRun {
    systemProperties = new HashMap<String, String>(System.properties)
    systemProperties.remove("java.endorsed.dirs") //https://youtrack.jetbrains.com/issue/IDEA-193219
}

jar {
    baseName = 'mlyidp'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

testlogger {
    theme 'mocha'
    slowThreshold 300
    showStandardStreams false
}

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
        includeEngines 'junit-vintage'
    }
}
test.finalizedBy(jacocoTestReport)

jacoco {
    toolVersion = "0.8.3"
    reportsDir = file("$buildDir/coverage")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage/html")
    }
}


checkstyle {
    toolVersion = "8.8"
    ignoreFailures = false
    configFile = file("${project.rootDir}/checkstyle.xml")
    configProperties = [ "checkstyle_conf_dir" : file("${project.rootDir}")]
    checkstyleTest.enabled = true
    checkstyleMain.source = sourceSets.main.allJava
    configurations {
        checkstyle
    }
}

docker {
    name "${project.group}/${jar.baseName}"
    files jar.archivePath
    buildArgs(['JAR_FILE': "${jar.archiveName}"])
}

artifacts {
    archives jar
}

task runAll {}
runAll.dependsOn(bootRun)