buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'http://repo.spring.io/plugins-release' }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.2.RELEASE")
        classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
    }
}

plugins {
    id "application"
    id "idea"
    id "java-library"
    id "java"
    id "jacoco"
    id "checkstyle"
    id "pmd"
    id 'com.adarshr.test-logger' version '1.2.0'
    id "org.unbroken-dome.test-sets" version "1.4.2"
    id "io.spring.dependency-management" version "1.0.4.RELEASE"
    id "org.springframework.boot" version "2.1.2.RELEASE"
    id "org.asciidoctor.convert" version "1.5.7"
    id "org.liquibase.gradle" version "2.0.1"
    id "com.palantir.docker" version "0.13.0"
    id 'net.ltgt.apt' version '0.15'
}

repositories {
    maven {
        url 'http://repo.spring.io/milestone'
    }
}

dependencies {
    api('org.javassist:javassist:3.23.1-GA')
    api('javax.xml.bind:jaxb-api:2.3.0')
    api('com.sun.xml.bind:jaxb-core:2.3.0.1')
    api('com.sun.xml.bind:jaxb-impl:2.3.0.1')
    api('javax.activation:activation:1.1.1')
    api("javax.inject:javax.inject:1")

    api("org.springframework.boot:spring-boot-starter")
    api("org.springframework.boot:spring-boot-starter-thymeleaf")
    api("org.springframework.boot:spring-boot-starter-jdbc")
    api("org.springframework.boot:spring-boot-starter-data-jpa")
    api("org.springframework.boot:spring-boot-starter-web")
    api("org.springframework.boot:spring-boot-starter-actuator")
    api("org.springframework.boot:spring-boot-starter-security")
    api("com.github.ulisesbocchio:jasypt-spring-boot-starter:2.1.0")
    api("org.springframework.security.extensions:spring-security-saml2-core:1.0.3.RELEASE")

    api("org.mariadb.jdbc:mariadb-java-client")

    api('com.google.guava:guava:27.0.1-jre')
    api('org.apache.commons:commons-lang3:3.8.1')
    api("joda-time:joda-time:2.2")
    api("com.jayway.jsonpath:json-path:2.0.0")
    api("org.liquibase:liquibase-core:3.6.2")
    api("commons-validator:commons-validator:1.6")
    api("com.nimbusds:nimbus-jose-jwt:4.23")

    api('org.webjars:bootstrap:3.3.7')
    api('org.webjars:jquery:2.2.1')
    api('org.webjars:font-awesome:5.0.6')
    api("org.jasypt:jasypt-hibernate4:1.9.2")
    api("org.bouncycastle:bcpkix-jdk15on:1.47")
    api("org.slf4j:slf4j-api:1.7.25")
    api("ch.qos.logback:logback-core:1.2.3")
    api("ch.qos.logback:logback-classic:1.2.3")

    testImplementation("junit:junit:4.12")
    testImplementation("org.junit.vintage:junit-vintage-engine:5.2.0")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.2.0")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.2.0")

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation("org.springframework.cloud:spring-cloud-starter:2.1.0.RELEASE")

    testImplementation("org.hamcrest:hamcrest-all:1.3")
    testImplementation("org.exparity:hamcrest-date:2.0.4")
    testImplementation("pl.pragmatists:JUnitParams:1.1.1")
    testImplementation("com.tngtech.java:junit-dataprovider:1.12.0")
    testImplementation("org.mockito:mockito-core:2.23.4")
    testImplementation("org.ajbrown:name-machine:1.0.0")

    testImplementation('org.testcontainers:testcontainers:1.10.2')
    testImplementation('org.testcontainers:mariadb:1.10.2')


    testRuntime("cglib:cglib-nodep:3.2.4")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.2.0")
    testRuntime("org.springframework.boot:spring-boot-devtools")
}


sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
mainClassName = "com.primasolutions.idp.Main"
jar.baseName = 'mlyidp'

bootRun {
    systemProperties = new HashMap<String, String>(System.properties)
    systemProperties.remove("java.endorsed.dirs") //https://youtrack.jetbrains.com/issue/IDEA-193219
}


tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

testlogger {
    theme 'mocha'
    slowThreshold 300
    showStandardStreams false
}

test.useJUnitPlatform()
test.finalizedBy(jacocoTestReport)

jacoco {
    toolVersion = "0.8.3"
    reportsDir = file("$buildDir/coverage")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage/html")
    }
}


checkstyle {
    toolVersion = "8.8"
    ignoreFailures = false
    configFile = file("${project.rootDir}/checkstyle.xml")
    configProperties = [ "checkstyle_conf_dir" : file("${project.rootDir}")]
    checkstyleTest.enabled = true
    checkstyleMain.source = sourceSets.main.allJava
    configurations {
        checkstyle
    }
}

docker {
    name "${project.group}/${jar.baseName}"
    files jar.archivePath
    buildArgs(['JAR_FILE': "${jar.archiveName}"])
}

artifacts {
    archives jar
}

task runAll {}
runAll.dependsOn(bootRun)