buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'http://repo.spring.io/plugins-release' }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE")
        classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
    }
}

plugins {
    id "java"
    id "jacoco"
    id "org.unbroken-dome.test-sets" version "1.4.2"
    id "io.spring.dependency-management" version "1.0.4.RELEASE"
    id "org.springframework.boot" version "1.5.9.RELEASE"
    id "org.asciidoctor.convert" version "1.5.7"
    id "org.liquibase.gradle" version "1.2.4"
    id "com.palantir.docker" version "0.13.0"
}

ext["snippetsDir"] = new File (project.buildDir ,"generated-snippets")
ext["spring-restdocs.version"] = "2.0.0.RELEASE"

repositories {
    maven {
        url 'http://repo.spring.io/milestone'
    }
}

dependencies {
    compile 'com.github.ulisesbocchio:jasypt-spring-boot-starter:2.0.0'
    compile("javax.inject:javax.inject:1")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile 'org.springframework.security.extensions:spring-security-saml2-core:1.0.2.RELEASE'
    compile("com.fasterxml.jackson.datatype:jackson-datatype-hibernate4")
    compile("io.rest-assured:rest-assured:3.0.3")
    compile("io.rest-assured:json-schema-validator:3.0.3")
    compile("mysql:mysql-connector-java")
    compile("joda-time:joda-time:2.2")
    compile("com.jayway.jsonpath:json-path:2.0.0")
    compile("org.liquibase:liquibase-core:3.5.3")
    compile("commons-validator:commons-validator:1.6")
    compile("com.nimbusds:nimbus-jose-jwt:4.23")
    compile('org.webjars:bootstrap:3.3.7')
    compile('org.webjars:jquery:2.2.1')
    compile('org.webjars:font-awesome:5.0.6')

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.springframework.security:spring-security-test")
    testCompile("org.springframework.restdocs:spring-restdocs-restassured")
    testCompile("org.springframework.restdocs:spring-restdocs-mockmvc")
    asciidoctor("org.springframework.restdocs:spring-restdocs-asciidoctor:${project.ext['spring-restdocs.version']}")
    testCompile("com.h2database:h2")
    testCompile("io.cucumber:cucumber-java:2.3.1")
    testCompile("io.cucumber:cucumber-junit:2.3.1")
    testCompile("io.cucumber:cucumber-spring:2.3.1")
    testCompile("io.cucumber:cucumber-jvm:2.3.1")
    testCompile("junit:junit:4.12")
    testCompile("pl.pragmatists:JUnitParams:1.1.1")
    testCompile("com.tngtech.java:junit-dataprovider:1.12.0")
    testCompile("org.mockito:mockito-core:2.13.0")
    testCompile("org.hamcrest:hamcrest-all:1.3")
    testCompile("org.exparity:hamcrest-date:2.0.4")
    compile("org.bouncycastle:bcpkix-jdk15on:1.47")
}


sourceCompatibility = 1.8
targetCompatibility = 1.8

bootRun{
    systemProperties = new HashMap<String, String>(System.properties)
}

jar {
    baseName = 'primaidp'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

test {
    testLogging {
        showStandardStreams = false
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "    Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
        afterTest { desc, result ->
            println "    Test : ${desc.name} [${desc.className}] with result: ${result.resultType} (${result.endTime - result.startTime} ms)"
        }
    }
}

jacoco {
    toolVersion = "0.7.9"
    reportsDir = file("$buildDir/coverage")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage/html")
    }
}

asciidoctor {
    def docAttributes = [:]
    docAttributes.put("generated-snippets", project.ext["snippetsDir"])

    attributes docAttributes
    outputDir "build/apidoc"
    inputs.dir project.ext["snippetsDir"]
    sourceDir  "src/test/resources/apidoc"
}
asciidoctor.dependsOn(test)

task installApiDoc(type: Copy){
    File target = new File(project.buildDir, "resources/main/static/apidoc")
    project.mkdir(target)
    from "${asciidoctor.outputDir}/html5"
    into  target.getAbsolutePath()
}
installApiDoc.dependsOn(asciidoctor)
jar.dependsOn(installApiDoc)


test.finalizedBy(jacocoTestReport)
test {
    outputs.dir snippetsDir
}

docker {
    name "${project.group}/${jar.baseName}"
    files jar.archivePath
    buildArgs(['JAR_FILE': "${jar.archiveName}"])
}

task runAll {}
runAll.dependsOn(bootRun)